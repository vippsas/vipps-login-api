openapi: 3.0.0
info:
  description: >
    Welcome to the Vipps Login API documentation. You will find documentation
    for all HTTP APIs here. See the [API Guide](https://vippsas.github.io/vipps-developer-docs/api/login) for more information.
  title: Vipps Login
  version: 1.0.3
servers:
  - url: https://apitest.vipps.no
  - url: https://api.vipps.no
paths:
  /access-management-1.0/access/oauth2/auth:
    get:
      description: >-
        The resource owner (end user) is redirected to this endpoint at the
        beginning of the authentication process,

        and it is used to obtain an authorization grant.

        To learn more about this endpoint please refer to the specification at https://tools.ietf.org/html/rfc6749#section-3.1
      tags:
        - Vipps Login API
      summary: The OAuth 2.0 authorize endpoint
      operationId: oauthAuth
      responses:
        "302":
          description: Empty response
        "401":
          description: genericError
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: genericError
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /access-management-1.0/access/oauth2/token:
    post:
      security:
        - basic: []
      description: >-
        The token endpoint is used by the client to obtain an access token by
        presenting its authorization grant.

        To learn more about this endpoint please refer to the specification at https://tools.ietf.org/html/rfc6749#section-3.2
      tags:
        - Vipps Login API
      summary: The OAuth 2.0 token endpoint
      operationId: oauth2Token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  example: 
                code:
                  type: string
                redirect_uri:
                  type: string
                  example: 'https://example.com/vipps-login-result-page'
                  description: >-
                    The redirect URL which the user agent is redirected to after finishing a login.
                    If the URL is using a custom URL scheme, such as myapp://, a path is required: myapp://path-to-something.
                    The URL must be exactly the same as the one specified on portal.vipps.no.
                    Be extra careful with trailing slashed and URL-encoded entoities.
                client_id:
                  type: string
              required:
                - grant_type
      responses:
        "200":
          description: oauth2TokenResponse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OauthTokenResponse"
        "401":
          description: genericError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: genericError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /vipps-userinfo-api/userinfo:
    get:
      security:
        - oauth2: []
      description: This endpoint returns the payload with the information that the user has consented to share. Find more info on the `/userinfo` endpoint at the OIDC Standard https://openid.net/specs/openid-connect-core-1_0.html#UserInfo
      tags:
        - Userinfo API
      operationId: userinfoAuthorizationCode
      parameters:
        - in: header
          name: Authorization
          description: The access token is required to authorize the userinfo request. It should be sent as a Bearer token. The access token is received on a successful request to the token endpoint `POST:/oauth2/token`. In Vipps Login the access token is valid for 1 hour.
          required: true
          schema:
            type: string
          example: Bearer mM60UNNAQTbLS5aJCeFGUbUYaoJT...
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserinfoApiV2'
              example:
                sub: 'c06c4afe-d9e1-4c5d-939a-177d752a0944'
                birthdate: '1815-12-10'
                email: 'user@example.com'
                email_verified: true
                nin: '10121550047'
                name: 'Ada Lovelace'
                given_name: 'Ada'
                family_name: 'Lovelace'
                sid: '7d78a726-af92-499e-b857-de263ef9a969'
                phone_number: '47912345678'
                address:
                  street_address: 'Suburbia 23'
                  postal_code: '2101'
                  region: 'OSLO'
                  country: 'NO'
                  formatted: 'Suburbia 23\n2101 OSLO\nNO'
                  address_type: 'home'
                other_addresses:
                  - street_address: 'Fancy Office Street 2'
                    postal_code: '0218'
                    region: 'OSLO'
                    country: 'NO'
                    formatted: 'Fancy Office Street 2\n0218 OSLO\nNO'
                    address_type: 'work'
                  - street_address: 'Summer House Lane 14'
                    postal_code: '1452'
                    region: 'OSLO'
                    country: 'NO'
                    formatted: 'Summer House Lane 14\n1452 OSLO\nNO'
                    address_type: 'other'
                accounts:
                  - account_name: "My savings"
                    account_number: "12064590675"
                    bank_name: "My bank"

  /access-management-1.0/access/.well-known/openid-configuration:
    get:
      description: >-
        The well known endpoint can be used to retrieve configuration
        information for OpenID Connect clients.

        To learn more about this endpoint please refer to the specification at https://openid.net/specs/openid-connect-discovery-1_0.html
      tags:
        - Vipps Login API
      summary: OpenID Connect Discovery
      operationId: discoverOpenIDConfiguration
      responses:
        "200":
          description: wellKnown
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WellKnown"
        "401":
          description: genericError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: genericError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /access-management-1.0/access/.well-known/jwks.json:
    get:
      description: >-
        This endpoint returns JSON Web Keys to be used as public keys for
        verifying OpenID Connect ID Tokens and,

        if enabled, OAuth 2.0 JWT Access Tokens.
      tags:
        - Vipps Login API
      summary: JSON Web Keys Discovery
      operationId: wellKnown
      responses:
        "200":
          description: JSONWebKeySet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JSONWebKeySet"
        "500":
          description: genericError
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  securitySchemes:
    basic:
      type: http
      scheme: basic
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://base_url/oauth2/auth
          tokenUrl: https://base_url/oauth2/token
          scopes:
            openid: Request an OpenID Connect ID Token
  schemas:
    JSONWebKey:
      type: object
      required:
        - use
        - kty
        - kid
        - alg
      properties:
        alg:
          description: The 'alg' (algorithm) parameter identifies the algorithm intended
            for use for the key.  The values used should either be registered in
            the IANA 'JSON Web Signature and Encryption Algorithms' registry
            established by [JWA] or be a value that contains a collision
            resistant name.
          type: string
          example: RS256
        crv:
          type: string
          example: P-256
        d:
          type: string
          example: T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE
        dp:
          type: string
          example: G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0
        dq:
          type: string
          example: s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk
        e:
          type: string
          example: AQAB
        k:
          type: string
          example: GawgguFyGrWKav7AX4VKUg
        kid:
          description: |-
            The "kid" (key ID) parameter is used to match a specific key. This
            is used, for example, to choose among a set of keys within a JWK Set
            during key rollover. The format of the "kid" value is
            unspecified.  When "kid" values are used within a JWK Set, different
            keys within the JWK Set SHOULD use distinct "kid" values.  (One
            example in which different keys might use the same "kid" value is if
            they have different "kty" (key type) values but are considered to be
            equivalent alternatives by the application using them.)  The "kid"
            value is a case-sensitive string.
          type: string
          x-go-name: Kid
          example: 1603dfe0af8f4596
        kty:
          description: >-
            The "kty" (key type) parameter identifies the cryptographic
            algorithm

            family used with the key, such as "RSA" or "EC". "kty" values should

            either be registered in the IANA "JSON Web Key Types" registry

            established by [JWA] or be a value that contains a Collision-

            Resistant Name.  The "kty" value is a case-sensitive string.
          type: string
          example: RSA
        n:
          type: string
          example: vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0
        p:
          type: string
          example: 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ
        q:
          type: string
          example: 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ
        qi:
          type: string
          example: GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU
        use:
          description: >-
            Use ("public key use") identifies the intended use of

            the public key. The "use" parameter is employed to indicate whether

            a public key is used for encrypting data or verifying the signature

            on data. Values are commonly "sig" (signature) or "enc" (encryption).
          type: string
          example: sig
        x:
          type: string
          example: f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU
        x5c:
          description: >-
            The "x5c" (X.509 certificate chain) parameter contains a chain of
            one

            or more PKIX certificates [RFC5280].  The certificate chain is

            represented as a JSON array of certificate value strings.  Each

            string in the array is a base64-encoded (Section 4 of [RFC4648] --

            not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.

            The PKIX certificate containing the key value MUST be the first

            certificate.
          type: array
          items:
            type: string
        y:
          type: string
          example: x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0
    JSONWebKeySet:
      type: object
      properties:
        keys:
          description: The value of the 'keys' parameter is an array of JWK values.  By
            default, the order of the JWK values within the array does not imply
            an order of preference among them, although applications of JWK Sets
            can choose to assign a meaning to the order for their purposes, if
            desired.
          type: array
          items:
            $ref: "#/components/schemas/JSONWebKey"
    WellKnown:
      description: It includes links to several endpoints (e.g. /oauth2/token) and exposes
        information on supported signature algorithms among others.
      type: object
      title: WellKnown
      required:
        - authorization_endpoint
        - id_token_signing_alg_values_supported
        - issuer
        - jwks_uri
        - response_types_supported
        - subject_types_supported
        - token_endpoint
      properties:
        authorization_endpoint:
          description: URL of the OP's OAuth 2.0 Authorization Endpoint.
          type: string
          example: https://apitest.vipps.no/access-management-1.0/access/oauth2/auth
        claims_parameter_supported:
          description: Boolean value specifying whether the OP supports use of the claims
            parameter, with true indicating support.
          type: boolean
          example: false
        claims_supported:
          description: JSON array containing a list of the Claim Names of the Claims that
            the OpenID Provider MAY be able to supply values for. Note that for
            privacy or other reasons, this might not be an exhaustive list.
          type: array
          items:
            type: string
            example:
              - sub
        grant_types_supported:
          description: JSON array containing a list of the OAuth 2.0 Grant Type values that
            this OP supports.
          type: array
          items:
            type: string
            example:
              - openid
              - name
              - phoneNumber
              - address
              - birthDate
              - email
        id_token_signing_alg_values_supported:
          description: JSON array containing a list of the JWS signing algorithms (alg
            values) supported by the OP for the ID Token to encode the Claims in
            a JWT.
          type: array
          items:
            type: string
            example:
              - RS256
        issuer:
          description: URL using the https scheme with no query or fragment component that
            the OP asserts as its IssuerURL Identifier. If IssuerURL discovery
            is supported , this value MUST be identical to the issuer value
            returned by WebFinger. This also MUST be identical to the iss Claim
            value in ID Tokens issued from this IssuerURL.
          type: string
          example: https://apitest.vipps.no/access-management-1.0/access/
        jwks_uri:
          description: URL of the OP's JSON Web Key Set [JWK] document. This contains the
            signing key(s) the RP uses to validate signatures from the OP. The
            JWK Set MAY also contain the Server's encryption key(s), which are
            used by RPs to encrypt requests to the Server. When both signing and
            encryption keys are made available, a use (Key Use) parameter value
            is REQUIRED for all keys in the referenced JWK Set to indicate each
            key's intended usage. Although some algorithms allow the same key to
            be used for both signatures and encryption, doing so is NOT
            RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used
            to provide X.509 representations of keys provided. When used, the
            bare key values MUST still be present and MUST match those in the
            certificate.
          type: string
          example: https://apitest.vipps.no/access-management-1.0/access/.well-known/jwks.json
        request_parameter_supported:
          description: Boolean value specifying whether the OP supports use of the request
            parameter, with true indicating support.
          type: boolean
          example: true
        request_uri_parameter_supported:
          description: Boolean value specifying whether the OP supports use of the
            request_uri parameter, with true indicating support.
          type: boolean
          example: true
        require_request_uri_registration:
          description: Boolean value specifying whether the OP requires any request_uri
            values used to be pre-registered using the request_uris registration
            parameter.
          type: boolean
          example: true
        response_modes_supported:
          description: JSON array containing a list of the OAuth 2.0 response_mode values
            that this OP supports.
          type: array
          items:
            type: string
            example:
              - query
        response_types_supported:
          description: JSON array containing a list of the OAuth 2.0 response_type values
            that this OP supports.
          type: array
          items:
            type: string
            example:
              - code
        scopes_supported:
          description: JSON array containing a list of the OAuth 2.0 [RFC6749] scope values
            that this server supports. The server MUST support the openid scope
            value. Servers MAY choose not to advertise some supported scope
            values even when this parameter is used.
          type: array
          items:
            type: string
            example:
              - openid
              - address
              - name
              - email
              - phoneNumber
              - nnin
              - birthDate
        subject_types_supported:
          description: JSON array containing a list of the Subject Identifier types that
            this OP supports. Valid types include pairwise and public.
          type: array
          items:
            type: string
            example:
              - pairwise
        token_endpoint:
          description: URL of the OP's OAuth 2.0 Token Endpoint
          type: string
        token_endpoint_auth_methods_supported:
          description: JSON array containing a list of Client Authentication methods
            supported by this Token Endpoint. The options are
            client_secret_post, client_secret_basic, client_secret_jwt, and
            private_key_jwt, as described in Section 9 of OpenID Connect Core
            1.0
          type: array
          items:
            type: string
            example:
              - client_secret_basic
              - client_secret_post
        userinfo_endpoint:
          description: URL of the OP's UserInfo Endpoint.
          type: string
          example: https://apitest.vipps.no/access-management-1.0/access/userinfo
        userinfo_signing_alg_values_supported:
          description: JSON array containing a list of the JWS [JWS] signing algorithms
            (alg values) [JWA] supported by the UserInfo Endpoint to encode the
            Claims in a JWT [JWT].
          type: array
          items:
            type: string
            example:
              - RS256
    UserinfoApiV2:
      type: object
      properties:
        accounts:
          description: 'Contains an array with the end user''s accounts registered in the Vipps app'
          type: array
          items:
            $ref: '#/components/schemas/AccountInfoApi'
        address:
          description: 'Contains the end user''s preferred addresses.'
          items:
            $ref: '#/components/schemas/AddressApi'
        other_addresses:
          description: 'Contains an array with the end user''s none default addresses, if any. This list can contain an address with the address_type home, work, and/or other, if the user has registered them in the Vipps app'
          type: array
          items:
            $ref: '#/components/schemas/AddressApi'
        birthdate:
          description: 'End-User''s birthday formatted as YYYY-MM-DD'
          type: string
          example: '2000-12-31'
        email:
          description: 'End user''s email address.'
          type: string
        email_verified:
          description: 'Boolean value if the End user''s email address is verified.'
          type: boolean
        family_name:
          description: 'Surname(s) or last name(s) of the end user.'
          type: string
        given_name:
          description: 'Given name(s) or first name(s) of the end user. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.'
          type: string
        name:
          description: 'End user''s full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User''s locale and preferences.'
          type: string
        nin:
          description: 'National identity number'
          type: string
          example: '09057517287'
          pattern: '^\d{11}$'
        phone_number:
          description: 'End-User''s telephone number on MSISDN format, up to 15 digits.'
          type: string
          example: '47912345678'
          pattern: '^\d{15}$'
        sid:
          description: 'Session identifier - This represents a Session of a User Agent or device. Currently not in use'
          type: string
          example: '7d78a726-af92-499e-b857-de263ef9a969'
        sub:
          description: 'Subject - Identifier for the end user'
          type: string
          example: 'c06c4afe-d9e1-4c5d-939a-177d752a0944'
    AccountInfoApi:
      type: object
      properties:
        account_name:
          description: "User''s defined name for account"
          type: string
        account_number:
          description: "User''s account number"
          type: string
        bank_name:
          description: "Bank connected to the account number"
          type: string
    AddressApi:
      type: object
      properties:
        address_type:
          description: 'Address type is either home, work or other'
          type: string
        country:
          description: 'Two letter country code'
          type: string
        default:
          description: 'If this is default address'
          type: boolean
        formatted:
          description: 'End user address as a formatted string'
          type: string
        postal_code:
          description: 'Postal code'
          type: string
        region:
          description: 'End user region'
          type: string
        street_address:
          description: 'End user street address'
          type: string
    OauthTokenResponse:
      description: The token response
      type: object
      properties:
        access_token:
          description: The access token issued by the authorization server.
          type: string
        expires_in:
          description: >-
            The lifetime in seconds of the access token.  For example, the value
            "3600" denotes that the access token will

            expire in one hour from the time the response was generated.
          type: integer
          format: int64
        id_token:
          description: To retrieve a refresh token request the id_token scope.
          type: integer
          format: int64
        refresh_token:
          description: >-
            The refresh token, which can be used to obtain new

            access tokens. To retrieve it add the scope "offline" to your access token request.
          type: string
        scope:
          description: The scope of the access token
          type: string
        token_type:
          description: The type of the token issued
          type: string
      example:
        access_token: shxuQPSLpKAiBrgD-HPbgDWc3RHzcXq3skcydKwRroo.Y5aH3PavJkZnSq5dffj8AmKVE-SdwRcbKhUKkmqimoQ
        expires_in: 3599
        id_token: eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzo2ZjIxMTlkZS03ZWY4LTQ0NDQtYjNkYy1lNDNiYWY2MDUwMGYifQ.eyJhdF9oYXNoIjoiUGpLVVQ0VUpFYkZWY05MempyOVppQSIsImF1ZCI6WyJlZGRkYjMyZi01MDI4LTQzOTctYjBhYi1lOGVjZjIxOGZkYzIiXSwiYXV0aF90aW1lIjoxNjQzMTIwMjA0LCJleHAiOjE2NDMxMjM4MDUsImlhdCI6MTY0MzEyMDIwNSwiaXNzIjoiaHR0cHM6Ly9lY2U0NmVjNC02ZjljLTQ4OWItOGZlNS0xNDZhODllMTE2MzUudGVjaC0wMi5uZXQvYWNjZXNzLW1hbmFnZW1lbnQtMS4wL2FjY2Vzcy8iLCJqdGkiOiI1MzM2NzJlYi1lY2M0LTQ0OTQtYjM4NS02NWY2MGJkMTk1YTciLCJub25jZSI6IjU4OTU0MTFlLWU5MzAtNDMyYS05ZWIzLWQzYTAzODhlMWIzOSIsInJhdCI6MTY0MzEyMDAwNywic2lkIjoiYWJlMjIzOTUtZThkNC00ODFlLThjZDItNTU0YmYwOWY0MzJmIiwic3ViIjoiNjNkODMwM2YtNDFkNS00MTUwLTllMzMtMGEzOWVkODE4NTZjIn0.Nejx0nIAPhGjDAOKIpLUVK2bcfTmUr7JfKU8V_7SHUdLGFjSHmDSXkAqYIL_oFXmTQsBrVXTQO-yjL6WGpR5nrpYPHzpY7hMUj00VQ1KTd9gwoMk6uBDvXAnSN7O-cNqC0ehZAlZ6ofR9TwDn03fhS1UcxhLnFq9phzxKD4q7EgBkHOQiwv90M8ZvrZMqdwtdjqIOABks0tVcYlQFKKDDrij0Df90vrFR-coAZeXJzRGsMUivvZlkwlYEQAlTx2BxBT2WqJr407DX-W0k0mj7QPnPQNV-0qT0VLJ6liUwFUi6MQrQ01yosrHwrmwY-0f_GwDDSPp4HizkTmT_CecQy9CLsbnASrcBurpLvjl9bfxXiYtZvvDlxyoyjMd05z94MmuADvM-nIWztKHIbU4ez6qRS1uyMPN2P9-_wzD7Tj2RCrAfSHlgTrx-grhqdkIqcVKdx8RVj5cmmbLDsmgfwLdM0m5Z_QYmctxq7TsLWm0x2A2-rbxlAma5USRDfPpzWBwbZDbJygXEIccGUwgG7SK6XHeTblHmgz87Tx7yfqTw9YSYbzxjnCCBwCXlKUUcHOLMRF_L0BwTBaNaFtYfgc5ne68Ej0V2Mz_BodR3OpRnukTdb1_nXAbDs4JiKhM22aR3R7qopAUnhUAFbde2q1sfwGr-b21a4NgEaWtFwk
        token_type: bearer
        scope: openid name phoneNumber address birthDate email
    ErrorResponse:
      description: Error responses are sent when an error (e.g. unauthorized, bad request,
        ...) occurred.
      type: object
      title: ErrorResponse
      required:
        - error
      properties:
        error:
          description: Name is the error name.
          type: string
        error_code:
          description: Code represents the error status code (404, 403, 401, ...).
          type: integer
          format: int64
        error_debug:
          description: Debug contains debug information. This is usually not available and
            has to be enabled.
          type: string
      example:
        error: invalid_request
        error_code: 400
        error_debug: The request is missing a required parameter, includes an invalid
          parameter or is otherwise malformed.
