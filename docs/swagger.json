{
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Welcome to the Vipps Log In API documentation. You will find documentation for all HTTP APIs here.",
    "title": "Vipps Log In",
    "version": "0.9"
  },
  "basePath": "/",
  "paths": {
    "/.well-known/jwks.json": {
      "get": {
        "description": "This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and,\nif enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like\n[node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "JSON Web Keys Discovery",
        "operationId": "wellKnown",
        "responses": {
          "200": {
            "description": "JSONWebKeySet",
            "schema": {
              "$ref": "#/definitions/JSONWebKeySet"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/.well-known/openid-configuration": {
      "get": {
        "description": "The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll\nyour own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this\nflow at https://openid.net/specs/openid-connect-discovery-1_0.html",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "OpenID Connect Discovery",
        "operationId": "discoverOpenIDConfiguration",
        "responses": {
          "200": {
            "description": "wellKnown",
            "schema": {
              "$ref": "#/definitions/WellKnown"
            }
          },
          "401": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/oauth2/auth": {
      "get": {
        "description": "This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows.\nOAuth2 is a very popular protocol and a library for your programming language will exists.\n\nTo learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "The OAuth 2.0 authorize endpoint",
        "operationId": "oauthAuth",
        "responses": {
          "302": {
            "description": "Empty response"
          },
          "401": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/oauth2/token": {
      "post": {
        "security": [
          {
            "basic": []
          },
          {
            "oauth2": []
          }
        ],
        "description": "The client makes a request to the token endpoint by sending the\nfollowing parameters using the \"application/x-www-form-urlencoded\" HTTP\nrequest entity-body.\n\n> Do not implement a client for this endpoint yourself. Use a library. There are many libraries\n> available for any programming language. You can find a list of libraries here: https://oauth.net/code/\n>\n> Do not the the Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "The OAuth 2.0 token endpoint",
        "operationId": "oauth2Token",
        "parameters": [
          {
            "type": "string",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "code",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "redirect_uri",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "client_id",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "oauth2TokenResponse",
            "schema": {
              "$ref": "#/definitions/OauthTokenResponse"
            }
          },
          "401": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/userinfo": {
      "get": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "description": "This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 access token.\nThe endpoint implements http://openid.net/specs/openid-connect-core-1_0.html#UserInfo .",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "OpenID Connect Userinfo",
        "operationId": "userinfo",
        "responses": {
          "200": {
            "description": "userinfoResponse",
            "schema": {
              "$ref": "#/definitions/UserinfoResponse"
            }
          },
          "401": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "JSONWebKey": {
      "type": "object",
      "required": [
        "use",
        "kty",
        "kid",
        "alg"
      ],
      "properties": {
        "alg": {
          "description": "The 'alg' (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA 'JSON Web Signature and Encryption Algorithms' registry established by [JWA] or be a value that contains a Collision- Resistant Name.",
          "type": "string",
          "example": "RS256"
        },
        "crv": {
          "type": "string",
          "example": "P-256"
        },
        "d": {
          "type": "string",
          "example": "T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE"
        },
        "dp": {
          "type": "string",
          "example": "G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0"
        },
        "dq": {
          "type": "string",
          "example": "s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk"
        },
        "e": {
          "type": "string",
          "example": "AQAB"
        },
        "k": {
          "type": "string",
          "example": "GawgguFyGrWKav7AX4VKUg"
        },
        "kid": {
          "description": "The \"kid\" (key ID) parameter is used to match a specific key.  This\nis used, for instance, to choose among a set of keys within a JWK Set\nduring key rollover.  The structure of the \"kid\" value is\nunspecified.  When \"kid\" values are used within a JWK Set, different\nkeys within the JWK Set SHOULD use distinct \"kid\" values.  (One\nexample in which different keys might use the same \"kid\" value is if\nthey have different \"kty\" (key type) values but are considered to be\nequivalent alternatives by the application using them.)  The \"kid\"\nvalue is a case-sensitive string.",
          "type": "string",
          "x-go-name": "Kid",
          "example": "1603dfe0af8f4596"
        },
        "kty": {
          "description": "The \"kty\" (key type) parameter identifies the cryptographic algorithm\nfamily used with the key, such as \"RSA\" or \"EC\". \"kty\" values should\neither be registered in the IANA \"JSON Web Key Types\" registry\nestablished by [JWA] or be a value that contains a Collision-\nResistant Name.  The \"kty\" value is a case-sensitive string.",
          "type": "string",
          "example": "RSA"
        },
        "n": {
          "type": "string",
          "example": "vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0"
        },
        "p": {
          "type": "string",
          "example": "6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ"
        },
        "q": {
          "type": "string",
          "example": "0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ"
        },
        "qi": {
          "type": "string",
          "example": "GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU"
        },
        "use": {
          "description": "Use (\"public key use\") identifies the intended use of\nthe public key. The \"use\" parameter is employed to indicate whether\na public key is used for encrypting data or verifying the signature\non data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).",
          "type": "string",
          "example": "sig"
        },
        "x": {
          "type": "string",
          "example": "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU"
        },
        "x5c": {
          "description": "The \"x5c\" (X.509 certificate chain) parameter contains a chain of one\nor more PKIX certificates [RFC5280].  The certificate chain is\nrepresented as a JSON array of certificate value strings.  Each\nstring in the array is a base64-encoded (Section 4 of [RFC4648] --\nnot base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.\nThe PKIX certificate containing the key value MUST be the first\ncertificate.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "y": {
          "type": "string",
          "example": "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0"
        }
      }
    },
    "JSONWebKeySet": {
      "type": "object",
      "properties": {
        "keys": {
          "description": "The value of the 'keys' parameter is an array of JWK values.  By default, the order of the JWK values within the array does not imply an order of preference among them, although applications of JWK Sets can choose to assign a meaning to the order for their purposes, if desired.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JSONWebKey"
          }
        }
      }
    },
    "WellKnown": {
      "description": "It includes links to several endpoints (e.g. /oauth2/token) and exposes information on supported signature algorithms among others.",
      "type": "object",
      "title": "WellKnown",
      "required": [
        "authorization_endpoint",
        "id_token_signing_alg_values_supported",
        "issuer",
        "jwks_uri",
        "response_types_supported",
        "subject_types_supported",
        "token_endpoint"
      ],
      "properties": {
        "authorization_endpoint": {
          "description": "URL of the OP's OAuth 2.0 Authorization Endpoint.",
          "type": "string"
        },
        "claims_parameter_supported": {
          "description": "Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.",
          "type": "boolean"
        },
        "claims_supported": {
          "description": "JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "grant_types_supported": {
          "description": "JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id_token_signing_alg_values_supported": {
          "description": "JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issuer": {
          "description": "URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.",
          "type": "string"
        },
        "jwks_uri": {
          "description": "URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.",
          "type": "string"
        },
        "registration_endpoint": {
          "description": "URL of the OP's Dynamic Client Registration Endpoint.",
          "type": "string"
        },
        "request_parameter_supported": {
          "description": "Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.",
          "type": "boolean"
        },
        "request_uri_parameter_supported": {
          "description": "Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.",
          "type": "boolean"
        },
        "require_request_uri_registration": {
          "description": "Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.",
          "type": "boolean"
        },
        "response_modes_supported": {
          "description": "JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "response_types_supported": {
          "description": "JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "revocation_endpoint": {
          "description": "URL of the authorization server's OAuth 2.0 revocation endpoint.",
          "type": "string"
        },
        "scopes_supported": {
          "description": "JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subject_types_supported": {
          "description": "JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token_endpoint": {
          "description": "URL of the OP's OAuth 2.0 Token Endpoint",
          "type": "string"
        },
        "token_endpoint_auth_methods_supported": {
          "description": "JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userinfo_endpoint": {
          "description": "URL of the OP's UserInfo Endpoint.",
          "type": "string"
        },
        "userinfo_signing_alg_values_supported": {
          "description": "JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserinfoResponse": {
      "description": "The userinfo response",
      "type": "object",
      "properties": {
        "birthdate": {
          "description": "End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.",
          "type": "string"
        },
        "email": {
          "description": "End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.",
          "type": "string"
        },
        "email_verified": {
          "description": "True if the End-User's e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.",
          "type": "boolean"
        },
        "family_name": {
          "description": "Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.",
          "type": "string"
        },
        "gender": {
          "description": "End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.",
          "type": "string"
        },
        "given_name": {
          "description": "Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.",
          "type": "string"
        },
        "locale": {
          "description": "End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.",
          "type": "string"
        },
        "middle_name": {
          "description": "Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.",
          "type": "string"
        },
        "name": {
          "description": "End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.",
          "type": "string"
        },
        "nickname": {
          "description": "Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.",
          "type": "string"
        },
        "phone_number": {
          "description": "End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.",
          "type": "string"
        },
        "phone_number_verified": {
          "description": "True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.",
          "type": "boolean"
        },
        "picture": {
          "description": "URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.",
          "type": "string"
        },
        "preferred_username": {
          "description": "Non-unique shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace.",
          "type": "string"
        },
        "profile": {
          "description": "URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.",
          "type": "string"
        },
        "sub": {
          "description": "Subject - Identifier for the End-User at the IssuerURL.",
          "type": "string"
        },
        "updated_at": {
          "description": "Time the End-User''s information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.",
          "type": "integer",
          "format": "int64"
        },
        "website": {
          "description": "URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.",
          "type": "string"
        },
        "zoneinfo": {
          "description": "String from zoneinfo [zoneinfo] time zone database representing the End-User''s time zone. For example, Europe/Paris or America/Los_Angeles.",
          "type": "string"
        }
      }
    },
    "OauthTokenResponse": {
      "description": "The token response",
      "type": "object",
      "properties": {
        "access_token": {
          "description": "The access token issued by the authorization server.",
          "type": "string"
        },
        "expires_in": {
          "description": "The lifetime in seconds of the access token.  For example, the value \"3600\" denotes that the access token will\nexpire in one hour from the time the response was generated.",
          "type": "integer",
          "format": "int64"
        },
        "id_token": {
          "description": "To retrieve a refresh token request the id_token scope.",
          "type": "integer",
          "format": "int64"
        },
        "refresh_token": {
          "description": "The refresh token, which can be used to obtain new\naccess tokens. To retrieve it add the scope \"offline\" to your access token request.",
          "type": "string"
        },
        "scope": {
          "description": "The scope of the access token",
          "type": "integer",
          "format": "int64"
        },
        "token_type": {
          "description": "The type of the token issued",
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "description": "Error responses are sent when an error (e.g. unauthorized, bad request, ...) occurred.",
      "type": "object",
      "title": "ErrorResponse",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "Name is the error name.",
          "type": "string"
        },
        "error_code": {
          "description": "Code represents the error status code (404, 403, 401, ...).",
          "type": "integer",
          "format": "int64"
        },
        "error_debug": {
          "description": "Debug contains debug information. This is usually not available and has to be enabled.",
          "type": "string"
        },
        "error_hint": {
          "description": "Hint contains further information on the nature of the error.",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "/oauth2/auth",
      "tokenUrl": "/oauth2/token",
      "scopes": {
        "offline": "A scope required when requesting refresh tokens",
        "openid": "Request an OpenID Connect ID Token"
      }
    }
  }
}
